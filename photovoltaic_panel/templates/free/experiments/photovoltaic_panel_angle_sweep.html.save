{% extends 'free/experiment.html' %}
{% load static %}
{% load i18n %}


{% block experiment_head %}
    <!-- pendulum libraries -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.0/dist/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/1.4.0/chartjs-plugin-annotation.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/1.2.1/chartjs-plugin-zoom.min.js"></script>

     <!-- slider  -->
     <script src="https://cdnjs.cloudflare.com/ajax/libs/fomantic-ui/2.8.4/components/slider.min.js"></script>
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fomantic-ui/2.8.4/components/slider.min.css">
 
    <!-- pendulum libraries -->


    <script src="https://unpkg.com/chartjs-chart-error-bars@3.7.2/build/index.umd.min.js"></script>
    <script src="https://d3js.org/d3-array.v3.min.js"></script>


{% endblock %}  


{% block configtab %}
<!-- Begin of the configuration tab-->
    
    
        <div class="ui two column grid container">
            <div class="column">
                <div class="ui segment">
                    <legend> <h3>{% trans 'Red (R) Intensity'%}</h3></legend>
                    <div style="padding-top: 5%;"  class="ui blue small bottom aligned labeled  slider"  id="slider-red_comp" ></div>
                        
                        <div class="ui input" >
                            <input class="free-input" type="number" id="red_comp">
                        </div>
                </div>
            </div>
            <div class="column">
                <div class="ui segment">
                    <legend><h3>{% trans 'Green (G) Intensity'%}</h3></legend>
                    <div style="padding-top: 5%;"  class="ui blue small bottom aligned labeled  slider" id="slider-green_comp" ></div>
                        
                        <div class="ui input">
                            <input class="free-input" type="number" id="green_comp">
                        </div>
                </div>
            </div>
        </div>
		<!-- 2 -->
        <div class="ui two column grid container">
            <div class="column">
                <div class="ui segment">
                    <legend> <h3>{% trans 'Blue (B) Intensity'%}</h3></legend>
                    <div style="padding-top: 5%;"  class="ui blue small bottom aligned labeled slider"  id="slider-blue_comp" ></div>
                        
                        <div class="ui input" >
                            <input class="free-input" type="number" id="blue_comp">
                        </div>
                </div>
            </div>
			
            <div class="column">
                <div class="ui segment">
                    {% if protocol_id  == 5 %}
                    	<legend> <h3>{% trans 'Load Resistor(%)'%}</h3></legend>
                    	<div style="padding-top: 5%;"  class="ui blue small bottom aligned labeled slider"  id="slider-buck" ></div>
                        
                        	<div class="ui input" >
                            		<input class="free-input" type="number" id="buck">
                        	</div>
		    {% else %}
			<legend> <h3>{% trans 'Angle(ยบ)'%}</h3></legend>
                        <div style="padding-top: 5%;"  class="ui blue small bottom aligned labeled slider"  id="slider-angle" ></div>

                                <div class="ui input" >
                                        <input class="free-input" type="number" id="angle">
                                </div>
                    {% endif %}
         	</div>
            </div>
           
        </div>
		
		
		
<!-- End of the configuration tab-->
{% endblock %}



<!-- Begin of the execution tab-->
{% block executiontab %}
<div class="ui grid stackable">

    <div class="row">
        <div class=" ten wide column">
            <h3>Angle vs Time</h3>
                <div >
                    <div id="plot_angle_time"></div>
                </div>
        </div>
   
    </div>
	
	<div class="row">
        <div class=" ten wide column">
            <h3>Load Resistor vs Time</h3>
                <div >
                    <div id="plot_resistance_time"></div>
                </div>
        </div>
   
    </div>
	
	<div class="row">
        <div class=" ten wide column">
            <h3>Voltage vs Time</h3>
                <div >
                    <div id="plot_voltage_time"></div>
                </div>
        </div>
   
    </div>
	
	<div class="row">
        <div class=" ten wide column">
            <h3>Current vs Time</h3>
                <div >
                    <div id="plot_current_time"></div>
                </div>
        </div>
   
    </div>
	
	<div class="row">
        <div class=" ten wide column">
            <h3>Power vs Time</h3>
                <div >
                    <div id="plot_power_time"></div>
                </div>
        </div>
   
    </div>
	
   

	
	
</div>

    <table id="results_table" class="ui celled table display" style="width:100%">
        <thead>
            <tr>
                <!--<th id="time">{% trans "Samples" %}</th>-->
                <th id="time">{% trans "Datetime" %}</th>
                <th id="angle">{% trans "Angle[ยบ]" %}</th>
               
				<th id="buck">{% trans "Resistance[%]" %}</th>
                
                <th id="voltage">{% trans "Voltage[V]" %}</th>
                
				<th id="current">{% trans "Current [A]" %}</th>
                
                <th id="power">{% trans "Power[mW]" %}</th>
                
            </tr>
        </thead>
    </table>
{% endblock %}   
<!-- End of the execution tab-->

		
{% block protocol_auxiliary_functions %}

<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

<script>
    
	//var receive_error_velocity
    //var receive_error_period

    //var plot_angle_time
    //var plot_sample_period
    //var plot_period_histogram
   //var period_data = []


function process_final_data(data_line){

}


/*
function process_partial_data(data_line){
    time = data_line.value.time
    angle = parseFloat(data_line.value.angle)
    //val1 = parseFloat(data_line.value.Val1)
   
    plot_angle_time.data.datasets[0].data.push({
        x: time, 
        y: angle
        //yMin: val3 - receive_error_velocity,
       // yMax: val3 + receive_error_velocity,
    });
    plot_angle_time.update();



    //period_data.push(val1)

    bin1 = d3.bin()
    histo = bin1(period_data);
    const bins = histo.map((k, i) => (k.x0+ " .. "+k.x1 ));
    const data = histo.map((k, i) => (k.length));
    plot_period_histogram.data.labels = bins
    plot_period_histogram.data.datasets[0].data = data
    plot_period_histogram.update();


    plot_sample_period.data.datasets[0].data.push({
        x: sample_number, 
        y: val1,
        yMin: val1 - receive_error_period,
        yMax: val1 + receive_error_period,
    });
    plot_sample_period.update();

}
*/


function on_save_experiment_UI(){

}





function on_ready_experiment_UI(){

    configure_slider("red_comp")
    configure_slider("green_comp")
    configure_slider("blue_comp")
    if (protocol_id === 5){
      configure_slider("buck")
    }
    else{
      configure_slider("angle")
    }
		
    buildPlot1(0,'plot_angle_time');
    buildPlot2(0,'plot_resistance_time');
    buildPlot3(0,'plot_voltage_time');
	buildPlot4(0, 'plot_current_time');
	buildPlot5(0, 'plot_power_time');
	
	
}
	
	
	
    //receive_error_velocity = 0.1;
    //receive_error_period = 0.0005;//response.data.value.e_period;


    /*ctx = $("#plot_angle_time")[0].getContext('2d');
    plot_sample_velocity = new Chart(ctx, {
        type: 'scatterWithErrorBars',
        data: {
            datasets: [{
                borderColor: "blue",
                backgroundColor: "blue",
                data: [ ],
            },],
        },
        options: {
            plugins: {
                legend: {
                    display: false,
                }, 
                autocolors: false,
            },
            scales: {
                y: {
                    title:{
                        display: true, 
                        text: gettext('Linear velocity [cm/s]'),
                    },
                    min: 8.5,
                    max: 9.5,
                },
                x: {
                    title:{
                        display: true, 
                        text: gettext('# Samples'),
                    },
                },
            },
        }
    });

    ctx = $("#plot_sample_velocity")[0].getContext('2d');
    plot_period_histogram = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [{
                borderColor: "blue",
                backgroundColor: "blue",
                data: [],
            },],
        },
        options: {
            offset: false,
            animation: true,
            scales: {   
                x: {
                    title:{
                        display: true, 
                        text: gettext('Period [s]'),
                    },
                    grid: {
                        offset: true
                        }
                },
                y: {
                    ticks: {
                        beginAtZero: true
                    },
                    
                }
            },
            plugins: {
                legend: {
                    display: false,
                }, 
                autocolors: false,
            },
        }
    });





    ctx = $("#plot_sample_period")[0].getContext('2d');
    plot_sample_period = new Chart(ctx, {
        type: 'scatterWithErrorBars',
        data: {
            datasets: [{
                borderColor: "blue",
                backgroundColor: "blue",
                data: [ ],
            },],
        },
        options: {
            plugins: {
                legend: {
                    display: false,
                }, 
                autocolors: false,
            },
            scales: {
                y: {
                    title:{
                        display: true, 
                        text: gettext('Period [s]'),
                    },
                },
                x: {
                    title:{
                        display: true, 
                        text: gettext('# Samples'),
                    },
                },
            },
        }
    });*/
	
	



function configure_slider(name){
        $('#slider-'+name).slider({
            min:  protocol_input_arguments[name].minimum,
            max: protocol_input_arguments[name].maximum, 
            step: protocol_input_arguments[name].multipleOf,
            start: protocol_input_arguments[name].default,
            input: '#'+name,
            onChange: function(value) {
                console.log("QQQQQQQQQQQQQQQQQQ "+value)
                $('#'+name).prop("value", value)
                onInputChanged()
           }
        })
        $('#'+name).change(function() {
            if($(this).val() > protocol_input_arguments[name].maximum)
                $(this).prop("value", protocol_input_arguments[name].maximum)
            if($(this).val() < protocol_input_arguments[name].minimum)
                $(this).prop("value", protocol_input_arguments[name].minimum)
            $("#slider-"+name).slider('set value', $(this).val())
            });
    }
	
/* build plots*/

function process_partial_data(data_line){
    angle = parseFloat(data_line.value.angle) 
	buck = parseFloat(data_line.value.buck)
	voltage = parseFloat(data_line.value.voltage)
    current = parseFloat(data_line.value.current)
    power = parseFloat(data_line.value.power)
	time = data_line.value.time
   
 


   Plotly.extendTraces('plot_angle_time', {x: [[time]],y: [[angle]]}, [0,]);
   Plotly.extendTraces('plot_resistance_time', {x:  [[time]], y:[[buck]]}, [0]);
   Plotly.extendTraces('plot_voltage_time', {x: [[time]],y: [[voltage]]}, [0]);
   Plotly.extendTraces('plot_current_time', {x: [[time]],y: [[current]]}, [0]);
   Plotly.extendTraces('plot_power_time', {x: [[time]],y: [[power]]}, [0]);

}


function buildPlot1(res, plotdiv) {

console.log(res);
var trace1 = {
      x: [],
      y: [],
  error_y: {
    type: 'data',
    color: '#85144B',
    array: [],
    thickness: 1.5,
    width:3,
    visible: true
  },
  mode: 'lines+markers',
  /*line: {
    color: "#17BECF", 
    width: 2
  },*/
  /*marker: {
    color: "#7F7F7F", 
    size: 6, 
    line: {
      color: "black", 
      width: 0.5
    }
  },*/
  type:"scatter",
      /*line: {
        color: '#80CAF6',
        shape: 'linear'
      },*/
      
      name: "res[1]"
    };

  var output_data = [trace1];

  var layout = {
   /* margin: {
    l: 50,
    r: 50,
    b: 50,
    t: 50,
    pad: 4
  },*/
    //showlegend:false, 
    xaxis: {
          title: gettext('Elapsed Time[ms]'),
		  //type: 'date',
          titlefont:{
                color: 'black',
                size: 14
                }
               //howticklabels: false
			   
               // rangemode: 'tozero'
              
               //rangeslider: {}
          },
    yaxis: {
          title: gettext('Angle [ยบ]'),
          //fixedrange: true,
		   //type: 'linear',
          titlefont:{
                color: 'black',
                size: 14
                }
				
               // rangemode: 'tozero'
          }
   };

   Plotly.newPlot(plotdiv, output_data, layout);
 
}

function buildPlot2(res,plotdiv) {
console.log(res);
var trace2 = {
      x: [],
      y: [],
  error_y: {
    type: 'data',
    color: '#85144B',
    array: [],
    thickness: 1.5,
    width:3,
    visible: true
  },
  mode: 'lines+markers',
  /*line: {
    color: "#1f77b4", 
    width: 1
  },*/
  /*marker: {
    color: "rgb(0, 255, 255)", 
    size: 6, 
    line: {
      color: "black", 
      width: 0.5
    }
  },*/
  type:"scatter",
      
      name: res[2]
    };

  var output_data = [trace2];

  var layout = {
 

    xaxis: {
          
          title: gettext('Elapsed Time[ms]'),
          titlefont:{
                color: 'black',
                size: 14
                }
              //  rangemode: 'tozero'
          },
    yaxis: {
      //range:[0.19,0.21],
          title: gettext('Resistance [%]'),
          titlefont:{
                color: 'black',
                size: 14
                }
                //rangemode: 'tozero'
          }
   };

   Plotly.newPlot(plotdiv, output_data, layout);
 
  }
  
  

function buildPlot3(res,plotdiv) {
console.log(res);
var trace3 = {
      x: [],
      y: [],
  error_y: {
    type: 'data',
    color: '#85144B',
    array: [],
    thickness: 1.5,
    width:3,
    visible: true
  },
  mode: 'lines+markers',
  /*line: {
    color: "#1f77b4", 
    width: 1
  },*/
  /*marker: {
    color: "rgb(0, 255, 255)", 
    size: 6, 
    line: {
      color: "black", 
      width: 0.5
    }
  },*/
  type:"scatter",
      
      name: res[3]
    };

  var output_data = [trace3];

  var layout = {
 

    xaxis: {
          
          title: gettext('Elapsed Time[ms]'),
          titlefont:{
                color: 'black',
                size: 14
                }
              //  rangemode: 'tozero'
          },
    yaxis: {
      //range:[0.19,0.21],
          title: gettext('Voltage [V]'),
          titlefont:{
                color: 'black',
                size: 14
                }
                //rangemode: 'tozero'
          }
   };

   Plotly.newPlot(plotdiv, output_data, layout);
 
  }
  
 function buildPlot4(res,plotdiv) {
console.log(res);
var trace4 = {
      x: [],
      y: [],
  error_y: {
    type: 'data',
    color: '#85144B',
    array: [],
    thickness: 1.5,
    width:3,
    visible: true
  },
  mode: 'lines+markers',
  /*line: {
    color: "#1f77b4", 
    width: 1
  },*/
  /*marker: {
    color: "rgb(0, 255, 255)", 
    size: 6, 
    line: {
      color: "black", 
      width: 0.5
    }
  },*/
  type:"scatter",
      
      name: res[4]
    };

  var output_data = [trace4];

  var layout = {
 

    xaxis: {
          
          title: gettext('Elapsed Time[ms]'),
          titlefont:{
                color: 'black',
                size: 14
                }
              //  rangemode: 'tozero'
          },
    yaxis: {
      //range:[0.19,0.21],
          title: gettext('Current [A]'),
		 // type:'linear',
          titlefont:{
                color: 'black',
                size: 14
                }
                //rangemode: 'tozero'
          }
   };

   Plotly.newPlot(plotdiv, output_data, layout);
 
 }
  
function buildPlot5(res,plotdiv) {
console.log(res);
var trace5 = {
      x: [],
      y: [],
  error_y: {
    type: 'data',
    color: '#85144B',
    array: [],
    thickness: 1.5,
    width:3,
    visible: true
  },
  mode: 'lines+markers',
  /*line: {
    color: "#1f77b4", 
    width: 1
  },*/
  /*marker: {
    color: "rgb(0, 255, 255)", 
    size: 6, 
    line: {
      color: "black", 
      width: 0.5
    }
  },*/
  type:"scatter",
      
      name: res[5]
    };

  var output_data = [trace5];

  var layout = {
 

    xaxis: {
          
          title: gettext('Elapsed Time[ms]'),
          titlefont:{
                color: 'black',
                size: 14
                }
              //  rangemode: 'tozero'
          },
    yaxis: {
      //range:[0.19,0.21],
          title: gettext('Power [mW]'),
          titlefont:{
                color: 'black',
                size: 14
                }
                //rangemode: 'tozero'
          }
   };

   Plotly.newPlot(plotdiv, output_data, layout);
 
  }
	



</script>
{% endblock %}   


